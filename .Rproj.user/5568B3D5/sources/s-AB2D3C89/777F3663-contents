cbf_filteredprint(i)
gene_i <- as.factor(discretized_exprs[i, ])
gene_i_correlates <-
  get_su(x = mini_exprs, y = as.factor(mini_exprs[i, ]))
gene_i_correlates$gene <- rownames(gene_i_correlates)
gene_i_correlates$su_ic <-
  su_supdis$`sort(su_ic, decreasing = T)`[match(gene_i_correlates$gene, su_supdis$gene)]
gene_i_correlates$fcbf_removed <-
  ifelse(
    gene_i_correlates$su_ic <  gene_i_correlates$`sort(su_ic, decreasing = T)`,
    'removed',
    'kept'
  )
gene_i_correlates <-
  gene_i_correlates[complete.cases(gene_i_correlates), ]

gene_i_correlates <-
  gene_i_correlates[gene_i_correlates$fcbf_removed == "removed", ]
edges_for_gene_i <-
  data.frame(
    EdgeA = sample(i, length(gene_i_correlates$gene), replace = T),
    EdgeB = gsub('\\.', '-', gene_i_correlates$gene),
    Weight = gene_i_correlates$`sort(su_ic, decreasing = T)`
  )
edgelist <- rbind(edgelist, edges_for_gene_i)
}

edgelist_final <-
  edgelist[as.character(edgelist$EdgeA) != as.character(edgelist$EdgeB),]

edgelist_final <-
  edgelist_final[!(paste(edgelist$EdgeA, edgelist$EdgeB) %in% paste(edgelist$EdgeB, edgelist$EdgeA)),]
library(igraph)
edgelist_final <-  droplevels(edgelist_final)
edgelist_final <- edgelist_final[complete.cases(edgelist_final),]
adj <- tidyr::spread(edgelist_final, key = EdgeB, value = Weight)
adj[is.na(adj)] <- 0
rownames(adj) <- adj$EdgeA
adj$EdgeA <- NULL

bla <- read.graph()
g <- graph_from_incidence_matrix(adj, weighted = T, directed = F)
hs <- hub_score(g, weights = NA)$vector
plot(
  g,
  vertex.size = 4,
  vertex.label.dist = 0,
  edge.curved = .2,
  vertex.label.font = 1,
  vertex.label.cex = .5
)