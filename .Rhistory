if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("FCBF")
library(FCBF)
library(Seurat)
library(dplyr)
library(igraph)
exprs <- as.data.frame(as.matrix(pbmc@data))
target <- as.factor(pbmc@ident)
# the Seurat object that is produced in Seurat's v2.0 tutorial
pbmc <- readRDS("./data/pbmc_tutorial.rds")
exprs <- as.data.frame(as.matrix(pbmc@data))
target <- as.factor(pbmc@ident)
rm(list=("pbmc"))
devtools::install_github('lubianat/FCBF')
set.seed(3)
discretized_exprs <- FCBF::discretize_exprs_supervised(exprs, target)
library(Seurat)
PBMC <- pbmc_small
pbmc <- pbmc_small
a
exprs <- as.data.frame(as.matrix(pbmc@data))
target <- as.factor(pbmc@ident)
rm(list=("pbmc"))
set.seed(3)
discretized_exprs <- FCBF::discretize_exprs_supervised(exprs, target)
symetrical_uncertainty_scores <- FCBF::get_su(discretized_exprs, target)
symetrical_uncertainty_scores$gene <- rownames(symetrical_uncertainty_scores)
#and order them
symetrical_uncertainty_scores <- symetrical_uncertainty_scores[order(symetrical_uncertainty_scores$`sort(su_ic, decreasing = T)`, decreasing =  T),]
order(symetrical_uncertainty_scores$`sort(su_ic, decreasing = T)`, decreasing =  T)
View(symetrical_uncertainty_scores)
rownmaes(symetrical_uncertainty_scores)
rownames(symetrical_uncertainty_scores)
colnames(symetrical_uncertainty_scores)
colnames(symetrical_uncertainty_scores)[1]
colnames(symetrical_uncertainty_scores)[1] <- 'SU'
fcbf_filtered <- fcbf(discretized_exprs, target, thresh = 0.2, verbose = T)
View(fcbf_filtered)
fcbf$gene <- rownames(fcbf)
fcbf_filtered$gene <- rownames(fcbf)
symetrical_uncertainty_scores_small <- symetrical_uncertainty_scores[symetrical_uncertainty_scores$SU > SU_threshold]
SU_threshold <- 0.2
symetrical_uncertainty_scores_small <- symetrical_uncertainty_scores[symetrical_uncertainty_scores$SU > SU_threshold]
SU_threshold <- 0.2
symetrical_uncertainty_scores_small <- symetrical_uncertainty_scores[symetrical_uncertainty_scores$SU > SU_threshold,]
bla <- gsub('\\.', '-',symetrical_uncertainty_scores_small[,2])
SU_genes <- gsub('\\.', '-',symetrical_uncertainty_scores_small[,2])
exprs_small <- discretized_exprs[SU_genes ,]
FCBF_genes <- gsub('\\.', '-', fcbf_filtered$gene)
devtools::install_github('lubianat/FCBF')
library(Seurat)
library(dplyr)
library(igraph)
# the Seurat object that is produced in Seurat's v2.0 tutorial
data("pbmc_small")
exprs <- as.data.frame(as.matrix(pbmc_small@data))
target <- as.factor(pbmc_small@ident)
set.seed(3)
discretized_exprs <- FCBF::discretize_exprs_supervised(exprs, target)
# get the SU scores
su_ic_vector <- FCBF::get_su(discretized_exprs, target)
su_ic_vector$gene <- rownames(su_ic_vector)
colnames(su_ic_vector)[1] <- 'SU'
fcbf_filtered <- fcbf(discretized_exprs, target, thresh = 0.2, verbose = T)
fcbf_filtered <- FCBF::fcbf(discretized_exprs, target, thresh = 0.2, verbose = T)
fcbf_filtered$gene <- rownames(fcbf)
fcbf_filtered$gene <- rownames(fcbf_filtered)
FCBF_genes <- gsub('\\.', '-', fcbf_filtered$gene)
FCBF::su_plot(exprs,target)
FCBF::su_plot(discretize_exprs(),target)
FCBF::su_plot(discretized_exprs,target)
SU_threshold <- 0.2
su_ic_vector_small <- su_ic_vector[su_ic_vector$SU > SU_threshold,]
SU_genes <- gsub('\\.', '-',su_ic_vector_small[,2])
exprs_small <- discretized_exprs[SU_genes ,]
su_i_j_matrix <- []
su_i_j_matrix <- matrix()
SU_genes[1]
i <- SU_genes[1]
gene_i <- as.factor(discretized_exprs[i, ])
gene_i_correlates <- get_su(x = exprs_small, y = as.factor(exprs_small[i, ]))
gene_i_correlates <- FCBF::get_su(x = exprs_small, y = as.factor(exprs_small[i, ]))
View(gene_i_correlates)
su_i_j_matrix <- data.frame()
su_i_j_matrix <- cbind(su_i_j_matrix, gene_i_correlates[,1])
su_i_j_matrix <- data.frame(genes =  SU_genes)
su_i_j_matrix <- cbind(su_i_j_matrix, gene_i_correlates[,1])
View(su_i_j_matrix)
gene_i <- as.factor(discretized_exprs[i, ])
gene_i_correlates <- FCBF::get_su(x = exprs_small, y = as.factor(exprs_small[i, ]))
colnames(gene_i_correlates) <- i
su_i_j_matrix <- data.frame(genes =  SU_genes)
print(i)
gene_i <- as.factor(discretized_exprs[i, ])
gene_i_correlates <- FCBF::get_su(x = exprs_small, y = as.factor(exprs_small[i, ]))
colnames(gene_i_correlates) <- i
su_i_j_matrix <- cbind(su_i_j_matrix, gene_i_correlates[,1])
colnames(gene_i_correlates)
View(gene_i_correlates)
su_i_j_matrix <- cbind(su_i_j_matrix, gene_i_correlates[,1])
su_i_j_matrix <- cbind(su_i_j_matrix, i = gene_i_correlates[,1])
View(su_i_j_matrix)
su_i_j_matrix <- cbind(su_i_j_matrix, get(i) = gene_i_correlates[,1])
su_i_j_matrix['bla']< gene_i_correlates[,1]
su_i_j_matrix['bla',] < gene_i_correlates[,1]
su_i_j_matrix$bla < gene_i_correlates[,1]
su_i_j_matrix$bla <- gene_i_correlates[,1]
View(su_i_j_matrix)
su_i_j_matrix$i <- gene_i_correlates[,1]
su_i_j_matrix['bla',] <- gene_i_correlates[,1]
su_i_j_matrix[,'bla'] <- gene_i_correlates[,1]
su_i_j_matrix <- data.frame(genes =  SU_genes)
su_i_j_matrix[,'bla'] <- gene_i_correlates[,1]
su_i_j_matrix[, i] <- gene_i_correlates[,1]
su_i_j_matrix <- data.frame(genes =  SU_genes)
# this can surely be improved for speed.
for (i in SU_genes) {
print(i)
gene_i <- as.factor(discretized_exprs[i, ])
gene_i_correlates <- FCBF::get_su(x = exprs_small, y = as.factor(exprs_small[i, ]))
colnames(gene_i_correlates) <- i
su_i_j_matrix[, i] <- gene_i_correlates[,1]
}
View(su_i_j_matrix)
su_ic_vector$SU
View(su_ic_vector)
names(su_ic_vector)
su_ic_vector$gene == su_i_j_matrix$genes
View(su_i_j_matrix)
which(su_ic_vector$gene == su_i_j_matrix$genes)
su_ic_vector$gene
size(su_ic_vector$gene)
length(su_ic_vector$gene)
su_ic_vector$gene[seq_len(length(su_i_j_matrix$genes))] == su_i_j_matrix$genes
all(su_ic_vector$gene[seq_len(length(su_i_j_matrix$genes))] == su_i_j_matrix$genes)
su_i_j_matrix$genes[i,]
su_i_j_matrix$genes[,i]
su_i_j_matrix[,i]
su_ic_vector$SU - su_i_j_matrix[i,]
su_ic_vector$SU
su_ic_vector$SU - su_i_j_matrix[,i]
su_i_j_matrix[,i] < su_ic_vector$SU
tf_vector <- su_i_j_matrix[,i] < su_ic_vector$SU
tf_vector <- su_i_j_matrix[,i] <- su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
tf_vector <- su_i_j_matrix[,i] < su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
tf_vector
su_i_j_matrix <- data.frame(genes =  SU_genes)
# this can surely be improved for speed.
for (i in SU_genes) {
print(i)
gene_i <- as.factor(discretized_exprs[i, ])
gene_i_correlates <- FCBF::get_su(x = exprs_small, y = as.factor(exprs_small[i, ]))
colnames(gene_i_correlates) <- i
su_i_j_matrix[, i] <- gene_i_correlates[,1]
}
for (i in su_i_j_matrix[,-1]){
if (all(su_ic_vector$gene[seq_len(length(su_i_j_matrix$genes))] == su_i_j_matrix$genes)){
tf_vector <- su_i_j_matrix[,i] < su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
}
}
tf_vector <- su_i_j_matrix[,i] < su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
su_i_j_matrix[,i]
i in su_i_j_matrix[,-1]
for (i in su_i_j_matrix[,-1]){
print(i)
if (all(su_ic_vector$gene[seq_len(length(su_i_j_matrix$genes))] == su_i_j_matrix$genes)){
tf_vector <- su_i_j_matrix[,i] < su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
}
}
su_i_j_matrix[,-1]
for (i in colnames(su_i_j_matrix[,-1])){
print(i)
if (all(su_ic_vector$gene[seq_len(length(su_i_j_matrix$genes))] == su_i_j_matrix$genes)){
tf_vector <- su_i_j_matrix[,i] < su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
}
}
su_i_j_matrix[,i]
su_i_j_matrix[,i] * tf_vector
filtered_su_i_j_matrix <- data.frame(genes =  SU_genes)
for (i in colnames(su_i_j_matrix[,-1])){
print(i)
if (all(su_ic_vector$gene[seq_len(length(su_i_j_matrix$genes))] == su_i_j_matrix$genes)){
tf_vector <- su_i_j_matrix[,i] < su_ic_vector$SU[seq_len(length(su_i_j_matrix$genes))]
filtered_su_i_j_matrix[,i] <- su_i_j_matrix[,i] * tf_vector
}
}
View(filtered_su_i_j_matrix)
list_of_fcbf_modules <- list()
for (seed in fcbf_filtered$gene){
print(seed)
}
su_i_j_matrix[,seed]
